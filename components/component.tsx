/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Tt2Vx1FdzPU
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useEffect, useState } from "react";
import { supabase } from '../lib/supabase';
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from "@/components/ui/dialog";

// Update the Job interface
interface Job {
  id: number;
  title: string;
  company: string;
  location: string;
  description: string;
  is_deleted: boolean; // New field
}

export function Component() {
  const [jobs, setJobs] = useState<Job[]>([]);
  // Remove the deletedJobIds state as we'll use the is_deleted field from the database

  const [newJob, setNewJob] = useState({
    title: "",
    company: "",
    location: "",
    description: "",
  });
  const [editingJob, setEditingJob] = useState<Job | null>(null);

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const { data, error } = await supabase.from('jobs').select('*');
    if (error) console.error('Error fetching jobs:', error);
    else setJobs(data || []);
  };

  const handleAddJob = async () => {
    const { data, error } = await supabase
      .from('jobs')
      .insert([newJob])
      .select();
    
    if (error) {
      console.error('Error adding job:', error);
    } else if (data) {
      setJobs([...jobs, data[0]]);
      setNewJob({
        title: "",
        company: "",
        location: "",
        description: "",
      });
    }
  };

  const handleEditJob = (job: Job) => {
    setEditingJob(job);
  };

  const handleUpdateJob = async () => {
    if (editingJob) {
      const { error } = await supabase
        .from('jobs')
        .update(editingJob)
        .eq('id', editingJob.id);
      
      if (error) console.error('Error updating job:', error);
      else {
        setJobs(jobs.map(job => job.id === editingJob.id ? editingJob : job));
        setEditingJob(null);
      }
    }
  };

  // Update the handleDeleteJob function
  const handleDeleteJob = async (id: number) => {
    const { error } = await supabase
      .from('jobs')
      .update({ is_deleted: true })
      .eq('id', id);
    
    if (error) {
      console.error('Error updating job:', error);
    } else {
      setJobs(jobs.map(job => 
        job.id === id ? { ...job, is_deleted: true } : job
      ));
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 sm:p-8 md:p-10">
      <h1 className="text-3xl font-bold mb-6">Job Board</h1>
      <div className="mb-6">
        <h2 className="text-2xl font-bold mb-4">Add New Job</h2>
        <form className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="grid gap-2">
            <Label htmlFor="title">Title</Label>
            <Input id="title" value={newJob.title} onChange={(e) => setNewJob({ ...newJob, title: e.target.value })} />
          </div>
          <div className="grid gap-2">
            <Label htmlFor="company">Company</Label>
            <Input
              id="company"
              value={newJob.company}
              onChange={(e) => setNewJob({ ...newJob, company: e.target.value })}
            />
          </div>
          <div className="grid gap-2">
            <Label htmlFor="location">Location</Label>
            <Input
              id="location"
              value={newJob.location}
              onChange={(e) => setNewJob({ ...newJob, location: e.target.value })}
            />
          </div>
          <div className="grid gap-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={newJob.description}
              onChange={(e) => setNewJob({ ...newJob, description: e.target.value })}
            />
          </div>
          <Button onClick={handleAddJob} className="md:col-span-2">
            Add Job
          </Button>
        </form>
      </div>
      <div>
        <h2 className="text-2xl font-bold mb-4">Job Listings</h2>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Title</TableHead>
              <TableHead>Company</TableHead>
              <TableHead>Location</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {jobs.map((job) => (
              <TableRow key={job.id} className={job.is_deleted ? 'line-through text-gray-500' : ''}>
                <TableCell className="font-medium">{job.title}</TableCell>
                <TableCell>{job.company}</TableCell>
                <TableCell>{job.location}</TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={() => handleEditJob(job)} disabled={job.is_deleted}>
                      Edit
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => handleDeleteJob(job.id)}
                      disabled={job.is_deleted}
                    >
                      Delete
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      {editingJob && (
        <Dialog open={!!editingJob} onOpenChange={() => setEditingJob(null)}>
          <DialogContent className="sm:max-w-[425px] bg-white z-50">
            <DialogHeader>
              <DialogTitle>Edit Job</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="title" className="text-right">
                  Title
                </Label>
                <Input
                  id="title"
                  value={editingJob.title}
                  onChange={(e) => setEditingJob({ ...editingJob, title: e.target.value })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="company" className="text-right">
                  Company
                </Label>
                <Input
                  id="company"
                  value={editingJob.company}
                  onChange={(e) => setEditingJob({ ...editingJob, company: e.target.value })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="location" className="text-right">
                  Location
                </Label>
                <Input
                  id="location"
                  value={editingJob.location}
                  onChange={(e) => setEditingJob({ ...editingJob, location: e.target.value })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="description" className="text-right">
                  Description
                </Label>
                <Textarea
                  id="description"
                  value={editingJob.description}
                  onChange={(e) => setEditingJob({ ...editingJob, description: e.target.value })}
                  className="col-span-3"
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setEditingJob(null)}>
                Cancel
              </Button>
              <Button onClick={handleUpdateJob}>Save Changes</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
